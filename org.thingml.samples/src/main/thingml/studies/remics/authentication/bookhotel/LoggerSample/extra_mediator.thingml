// 
// (c) SINTEF 2012
//
// Define the logger by hand to compare with the generated one for test
// 
// by Runze Hao (haoshaochi@gmail.com)
//

import "message_extra_test.thingml"

thing ExtraMediator includes ExtraMessage,Logger
{
    property extra_msg:String = ""
    
    
    provided port Client {
		receives begin
		sends extraMsg
	}
	
	required port Server {
		sends begin
        receives begin_r,extraMsg
	}
    statechart Authentication init Ready {
		state Ready {
            on entry print "Mediator: Ready, Waiting for begin..."
			transition -> Next 
				event e : Client?begin
				action do
					Server!begin(e.msg)
				end
        }
        state Next{
            on entry do 
                print "Mediator: next..."
                Client!extraMsg(extra_msg)
            end
            on exit do
            end
        }
    }
    
    
}

thing Logger{
    property trace_buffer :String
    
    function log(trace:String) do
        print "==LOG: "+trace+" !=="
        trace_buffer = trace_buffer + trace +"\n"
    end
    function printlog() do
        print "====TRACE====\n"
        print trace_buffer
    end
    function clearlog() do
        trace_buffer =""
    end
}



thing Logger_ExtraConfig includes ExtraMessage,ControlMessage
{
    provided port PrvPort_Control{
        receives startMsg, stopMsg
    }
    provided port PrvPort_Client_ExtraPort {
        receives begin
        sends begin_r
    }
    required port ReqPort_Server_ExtraPort {
        sends begin
        receives begin_r,extraMsg
    }

    statechart Logger init Ready {
        state Ready{
            on entry do
                clearlog()
                print "Ready, Waiting for start trigger"
            end
            transition->Logging
                event e:PrvPort_Control?startMsg
        }
        state Logging{
            on entry do 
                print "Logger start!"
                log("@startuml")
            end
            on exit do
                log("@enduml")
                printlog()
            end
            transition-> Ready
                event e: PrvPort_Control?stopMsg
            internal
                event e: PrvPort_Client_ExtraPort?begin
                action do
                    log("Client -> Logger_ExtraConfig : begin")
                    ReqPort_Server_ExtraPort!begin(e.msg)
                    log("Logger_ExtraConfig -> Server : begin")
                end
            internal
                event e: ReqPort_Server_ExtraPort?begin_r
                action do
                    log("Server -> Logger_ExtraConfig : begin_r")
                    PrvPort_Client_ExtraPort!begin_r(e.msg)
                    log("Logger_ExtraConfig -> Client : begin_r")
                end 
        }
    }
}

thing Control includes ControlMessage
@mock "true"{
    required port controlPort{
        sends startMsg, stopMsg
    }
}    