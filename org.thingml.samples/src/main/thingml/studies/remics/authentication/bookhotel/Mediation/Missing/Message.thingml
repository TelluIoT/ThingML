// 
// (c) SINTEF 2012
//
// Define the messages trying to book hotel on a remote service.
// 
// by Runze Hao (haoshaochi@gmail.com)
//
import "../../../../../../datatypes.thingml"

// three situations for missing messages
// 1. server or client receives at the first place, so no former message sent or received
// 2. client(server) receives after sending a message, so has former message that client(server) sends
// 3. client(server) receives after receiving a meesage, so has former message that server(client) sends
// so the annotation should be like (@missing "1;null;Server;rMiM1")
// four parameters, the first means which situation, the second refers to former message name and "null" for no
// the third : thing name and port name who receive this missing message, see examples below.
// and the fourth maybe a default value

thing fragment MissingMessage {//4 messages
    
    //ask if have empty rooms
    message rMiM1(msg:String)@missing "1;null;Server,Toclient;rMiM1"; 
                                                              // server receives at first place
    message rRequest(msg:String);
    message rMiM2(msg:String,msg1:Boolean)                                // client receives after sending rRequest, 
    @missing "2;MissingMessage.rRequest;FakeClient,Toserver;rMiM2,true";  //so mediator receives rRequest, and create rMiM2 and send to client
    message rMiM4(msg:String)
    @missing "3;MissingMessage.rMiM2;FakeClient,Toserver;rMiM4"; 
                                                                                                                                                          
    message rMiM3(msg:String)                                             // server receives after receiving rRequest                                                          
    @missing "3;MissingMessage.rRequest;Server,Toclient;rMiM3";           //so mediator resend rRequest to server, and create rMiM3 and send to server
    
	message rReply(msg: String); 
    
    //need ID
    message inputID(msg:String);
    message idReply(msg:Boolean);
}

thing fragment ExtraMessage {//4 messages
    
    message rExtra(msg:String)@extra "";

}

//control to start and stop mediator
thing fragment ControlMessage{
    message startMsg();
    message stopMsg();
}