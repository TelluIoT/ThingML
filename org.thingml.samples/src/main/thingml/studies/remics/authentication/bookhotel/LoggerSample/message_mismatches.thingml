// 
// (c) SINTEF 2012
//
// Define some message, some are used for mismatches
// 
// by Runze Hao (haoshaochi@gmail.com)
//
import "../../../../../datatypes.thingml"

thing fragment ExtraMessage {
    message begin(msg:String);     //client sends, server requires
    message begin_r(msg:String);   //server sends, client requires
    message extraMsg(msg:String)  //server sends, but client doesn't receive, so mediator should ignore this message
    @extra "server, begin";      //two parameters, one is who sends this message, the other is which message it follows
}

thing fragment MissingMessage{
    message missingMsg(msg:String)
    @missing ""; 
}

thing fragment SignatureMessage{
    message signaturreMsg(msg:String, msg2 : Integer, msg3 : Boolean)
    @signature "SignatureMessage.actualSignaturreMsg";//could be a message, or a list of parameters
    
    message actualSignaturreMsg(msg:Integer, msg2:Byte, msg4:String);
    //@signature "defined,<datatype1>,<datatype2>" 
}

thing fragment MergeMessage{
}

thing fragment MergeAndSignatureMessage{
    message mergeMsg(Msg:Integer,Msg2:Byte)
    @merge "mergeMsg1,mergeMsg2"
    @signature "MergeMessage.mergeMsg1.Msg, MergeMessage.mergeMsg2.Msg";
    
    //
    message mergeMsg1(msg:String);
    message mergeMsg2(msg:Boolean);
    
    //if not in order?
}

thing fragment SpiltMessage{
    message spiltMsg(msg1:String, msg2:Integer,msg3:Boolean)
    @spilt "spiltMsg1,spiltMsg2";
    
    message spiltMsg1(msg1:String);
    message spiltMsg2(msg2:Integer,msg3:Boolean);
    
    //if not in order?   
    //@spilt "spiltMsg1(1),spiltMsg2(2,3)"
}

thing fragment OrderMessage{
    
}