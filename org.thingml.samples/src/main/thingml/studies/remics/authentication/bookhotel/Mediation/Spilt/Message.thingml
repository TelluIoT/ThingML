// 
// (c) SINTEF 2012
//
// Define the messages trying to book hotel on a remote service.
// 
// by Runze Hao (haoshaochi@gmail.com)
//
import "../../../../../../datatypes.thingml"

//description for Spilt messages: client send message a(a1,a2,a3) with parameters a1,a2,a3, 
//but server need message b(a1),c(a2),d(a3)
//so we need a mediator to transfome this message mismatche
//for the annotation @split, we need 3 parameters separated by semicolon ";"
// the first one is the sequence number/amount, the second is the splited message name, 
// the third is the parameters from the original message used for the splited one

thing fragment SplitMessage {//4 messages
    
    //ask if have empty rooms
    
    message rSpM1(msg:Integer,msg1:String,msg2:Double,msg3:String)
    @split "1/3,rSpM1_1,(msg|msg1);2/3,rSpM1_2,(msg2);3/3,rSpM1_3,(msg3)";  
    
    message rSpM1_1(msg:Integer,msg1:String); 
    message rSpM1_2(msg2:Double)
    @signature "rSpM1_2_;(msg2-msg)";
    message rSpM1_3(msg3:String);
    
    
    message rSpM1_1_re()@extra""; 
    
    message rSpM1_2_re()@extra""; 
    message rSpM1_2(msg2:Double)
    @signature "rSpM1_2_;(msg2-msg)";
  
    message rSpM1_3_re(msg:Boolean);
    message rSpM1_2_(msg:String);
    
    
    message rRequest(msg:String);
	message rReply(msg: String)
    @signature "rReply_;(msg-msg)";
    message rReply_(msg:String);
    
    //need ID
    message inputID(msg:String);
    message idReply(msg:Boolean);
}


//control to start and stop mediator
thing fragment ControlMessage{
    message startMsg();
    message stopMsg();
    
}